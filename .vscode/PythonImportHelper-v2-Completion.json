[
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "cv2",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "cv2",
        "description": "cv2",
        "detail": "cv2",
        "documentation": {}
    },
    {
        "label": "shutil",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "shutil",
        "description": "shutil",
        "detail": "shutil",
        "documentation": {}
    },
    {
        "label": "YOLO",
        "importPath": "ultralytics",
        "description": "ultralytics",
        "isExtraImport": true,
        "detail": "ultralytics",
        "documentation": {}
    },
    {
        "label": "resize_image",
        "kind": 2,
        "importPath": "cnn_sorting",
        "description": "cnn_sorting",
        "peekOfCode": "def resize_image(image, max_width=1920, max_height=1080):\n    \"\"\"Resizes the image to fit within the specified dimensions while maintaining aspect ratio.\"\"\"\n    height, width = image.shape[:2]\n    scaling_factor = min(max_width / width, max_height / height)\n    new_size = (int(width * scaling_factor), int(height * scaling_factor))\n    return cv2.resize(image, new_size, interpolation=cv2.INTER_AREA)\n# Process each image in the source directory\nfor image_name in os.listdir(source_dir):\n    if image_name.endswith(('.jpg', '.jpeg', '.png')):\n        image_path = os.path.join(source_dir, image_name)",
        "detail": "cnn_sorting",
        "documentation": {}
    },
    {
        "label": "source_dir",
        "kind": 5,
        "importPath": "cnn_sorting",
        "description": "cnn_sorting",
        "peekOfCode": "source_dir = r'C:\\Users\\c883206\\OneDrive - BNSF Railway\\RoboRailCop\\2025-01-16_all_trnv_images\\crops'\n# Define the target directory where images will be organized by class\nclosed_door_dir = r\"C:\\Users\\c883206\\OneDrive - BNSF Railway\\RoboRailCop\\2025-01-16_all_trnv_images\\crops\\closed_door\"\ncontainer_side_dir = r\"C:\\Users\\c883206\\OneDrive - BNSF Railway\\RoboRailCop\\2025-01-16_all_trnv_images\\crops\\cont_sides\"\nopen_door_dir = r\"C:\\Users\\c883206\\OneDrive - BNSF Railway\\RoboRailCop\\2025-01-16_all_trnv_images\\crops\\open_door\"\nhandhold_dir = r\"C:\\Users\\c883206\\OneDrive - BNSF Railway\\RoboRailCop\\2025-01-16_all_trnv_images\\crops\\handholds\"\ncont_face_dir = r\"C:\\Users\\c883206\\OneDrive - BNSF Railway\\RoboRailCop\\2025-01-16_all_trnv_images\\crops\\cont_face\"\n# Create a list of class identifiers\nclass_identifiers = ['1', '2', '3', '4', '5']  # Add more class identifiers as needed\ndef resize_image(image, max_width=1920, max_height=1080):",
        "detail": "cnn_sorting",
        "documentation": {}
    },
    {
        "label": "closed_door_dir",
        "kind": 5,
        "importPath": "cnn_sorting",
        "description": "cnn_sorting",
        "peekOfCode": "closed_door_dir = r\"C:\\Users\\c883206\\OneDrive - BNSF Railway\\RoboRailCop\\2025-01-16_all_trnv_images\\crops\\closed_door\"\ncontainer_side_dir = r\"C:\\Users\\c883206\\OneDrive - BNSF Railway\\RoboRailCop\\2025-01-16_all_trnv_images\\crops\\cont_sides\"\nopen_door_dir = r\"C:\\Users\\c883206\\OneDrive - BNSF Railway\\RoboRailCop\\2025-01-16_all_trnv_images\\crops\\open_door\"\nhandhold_dir = r\"C:\\Users\\c883206\\OneDrive - BNSF Railway\\RoboRailCop\\2025-01-16_all_trnv_images\\crops\\handholds\"\ncont_face_dir = r\"C:\\Users\\c883206\\OneDrive - BNSF Railway\\RoboRailCop\\2025-01-16_all_trnv_images\\crops\\cont_face\"\n# Create a list of class identifiers\nclass_identifiers = ['1', '2', '3', '4', '5']  # Add more class identifiers as needed\ndef resize_image(image, max_width=1920, max_height=1080):\n    \"\"\"Resizes the image to fit within the specified dimensions while maintaining aspect ratio.\"\"\"\n    height, width = image.shape[:2]",
        "detail": "cnn_sorting",
        "documentation": {}
    },
    {
        "label": "container_side_dir",
        "kind": 5,
        "importPath": "cnn_sorting",
        "description": "cnn_sorting",
        "peekOfCode": "container_side_dir = r\"C:\\Users\\c883206\\OneDrive - BNSF Railway\\RoboRailCop\\2025-01-16_all_trnv_images\\crops\\cont_sides\"\nopen_door_dir = r\"C:\\Users\\c883206\\OneDrive - BNSF Railway\\RoboRailCop\\2025-01-16_all_trnv_images\\crops\\open_door\"\nhandhold_dir = r\"C:\\Users\\c883206\\OneDrive - BNSF Railway\\RoboRailCop\\2025-01-16_all_trnv_images\\crops\\handholds\"\ncont_face_dir = r\"C:\\Users\\c883206\\OneDrive - BNSF Railway\\RoboRailCop\\2025-01-16_all_trnv_images\\crops\\cont_face\"\n# Create a list of class identifiers\nclass_identifiers = ['1', '2', '3', '4', '5']  # Add more class identifiers as needed\ndef resize_image(image, max_width=1920, max_height=1080):\n    \"\"\"Resizes the image to fit within the specified dimensions while maintaining aspect ratio.\"\"\"\n    height, width = image.shape[:2]\n    scaling_factor = min(max_width / width, max_height / height)",
        "detail": "cnn_sorting",
        "documentation": {}
    },
    {
        "label": "open_door_dir",
        "kind": 5,
        "importPath": "cnn_sorting",
        "description": "cnn_sorting",
        "peekOfCode": "open_door_dir = r\"C:\\Users\\c883206\\OneDrive - BNSF Railway\\RoboRailCop\\2025-01-16_all_trnv_images\\crops\\open_door\"\nhandhold_dir = r\"C:\\Users\\c883206\\OneDrive - BNSF Railway\\RoboRailCop\\2025-01-16_all_trnv_images\\crops\\handholds\"\ncont_face_dir = r\"C:\\Users\\c883206\\OneDrive - BNSF Railway\\RoboRailCop\\2025-01-16_all_trnv_images\\crops\\cont_face\"\n# Create a list of class identifiers\nclass_identifiers = ['1', '2', '3', '4', '5']  # Add more class identifiers as needed\ndef resize_image(image, max_width=1920, max_height=1080):\n    \"\"\"Resizes the image to fit within the specified dimensions while maintaining aspect ratio.\"\"\"\n    height, width = image.shape[:2]\n    scaling_factor = min(max_width / width, max_height / height)\n    new_size = (int(width * scaling_factor), int(height * scaling_factor))",
        "detail": "cnn_sorting",
        "documentation": {}
    },
    {
        "label": "handhold_dir",
        "kind": 5,
        "importPath": "cnn_sorting",
        "description": "cnn_sorting",
        "peekOfCode": "handhold_dir = r\"C:\\Users\\c883206\\OneDrive - BNSF Railway\\RoboRailCop\\2025-01-16_all_trnv_images\\crops\\handholds\"\ncont_face_dir = r\"C:\\Users\\c883206\\OneDrive - BNSF Railway\\RoboRailCop\\2025-01-16_all_trnv_images\\crops\\cont_face\"\n# Create a list of class identifiers\nclass_identifiers = ['1', '2', '3', '4', '5']  # Add more class identifiers as needed\ndef resize_image(image, max_width=1920, max_height=1080):\n    \"\"\"Resizes the image to fit within the specified dimensions while maintaining aspect ratio.\"\"\"\n    height, width = image.shape[:2]\n    scaling_factor = min(max_width / width, max_height / height)\n    new_size = (int(width * scaling_factor), int(height * scaling_factor))\n    return cv2.resize(image, new_size, interpolation=cv2.INTER_AREA)",
        "detail": "cnn_sorting",
        "documentation": {}
    },
    {
        "label": "cont_face_dir",
        "kind": 5,
        "importPath": "cnn_sorting",
        "description": "cnn_sorting",
        "peekOfCode": "cont_face_dir = r\"C:\\Users\\c883206\\OneDrive - BNSF Railway\\RoboRailCop\\2025-01-16_all_trnv_images\\crops\\cont_face\"\n# Create a list of class identifiers\nclass_identifiers = ['1', '2', '3', '4', '5']  # Add more class identifiers as needed\ndef resize_image(image, max_width=1920, max_height=1080):\n    \"\"\"Resizes the image to fit within the specified dimensions while maintaining aspect ratio.\"\"\"\n    height, width = image.shape[:2]\n    scaling_factor = min(max_width / width, max_height / height)\n    new_size = (int(width * scaling_factor), int(height * scaling_factor))\n    return cv2.resize(image, new_size, interpolation=cv2.INTER_AREA)\n# Process each image in the source directory",
        "detail": "cnn_sorting",
        "documentation": {}
    },
    {
        "label": "class_identifiers",
        "kind": 5,
        "importPath": "cnn_sorting",
        "description": "cnn_sorting",
        "peekOfCode": "class_identifiers = ['1', '2', '3', '4', '5']  # Add more class identifiers as needed\ndef resize_image(image, max_width=1920, max_height=1080):\n    \"\"\"Resizes the image to fit within the specified dimensions while maintaining aspect ratio.\"\"\"\n    height, width = image.shape[:2]\n    scaling_factor = min(max_width / width, max_height / height)\n    new_size = (int(width * scaling_factor), int(height * scaling_factor))\n    return cv2.resize(image, new_size, interpolation=cv2.INTER_AREA)\n# Process each image in the source directory\nfor image_name in os.listdir(source_dir):\n    if image_name.endswith(('.jpg', '.jpeg', '.png')):",
        "detail": "cnn_sorting",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "common_obj_detection",
        "description": "common_obj_detection",
        "peekOfCode": "model = YOLO(\"yolov8n.pt\")  # You can specify different YOLO models here\ncrop_location = r\"C:\\Users\\c883206\\OneDrive - BNSF Railway\\RoboRailCop\\2025-01-16_all_trnv_images\\crops\"\nfor crop in os.listdir(crop_location):\n    if crop.endswith(('.jpg', '.jpeg', '.png')):\n        # Load an image\n        img = cv2.imread(os.path.join(crop_location, crop))  # Replace with your image path\n        # Perform object detection\n        results = model.predict(source=img)  # Use 'cap' for video\n        # Process the results\n        detection_made = False",
        "detail": "common_obj_detection",
        "documentation": {}
    },
    {
        "label": "crop_location",
        "kind": 5,
        "importPath": "common_obj_detection",
        "description": "common_obj_detection",
        "peekOfCode": "crop_location = r\"C:\\Users\\c883206\\OneDrive - BNSF Railway\\RoboRailCop\\2025-01-16_all_trnv_images\\crops\"\nfor crop in os.listdir(crop_location):\n    if crop.endswith(('.jpg', '.jpeg', '.png')):\n        # Load an image\n        img = cv2.imread(os.path.join(crop_location, crop))  # Replace with your image path\n        # Perform object detection\n        results = model.predict(source=img)  # Use 'cap' for video\n        # Process the results\n        detection_made = False\n        for result in results:",
        "detail": "common_obj_detection",
        "documentation": {}
    },
    {
        "label": "resize_image",
        "kind": 2,
        "importPath": "heuristic_cropping",
        "description": "heuristic_cropping",
        "peekOfCode": "def resize_image(image, max_width=1920*2, max_height=1080*2):\n    \"\"\"Resizes the image to fit within the specified dimensions while maintaining aspect ratio.\"\"\"\n    height, width = image.shape[:2]\n    scaling_factor = min(max_width / width, max_height / height)\n    new_size = (int(width * scaling_factor), int(height * scaling_factor))\n    return cv2.resize(image, new_size, interpolation=cv2.INTER_AREA)\ndef resize_to_height(image, target_height=1024):\n    \"\"\"Resizes the image to a consistent height while maintaining aspect ratio.\"\"\"\n    height, width = image.shape[:2]\n    scaling_factor = target_height / height",
        "detail": "heuristic_cropping",
        "documentation": {}
    },
    {
        "label": "resize_to_height",
        "kind": 2,
        "importPath": "heuristic_cropping",
        "description": "heuristic_cropping",
        "peekOfCode": "def resize_to_height(image, target_height=1024):\n    \"\"\"Resizes the image to a consistent height while maintaining aspect ratio.\"\"\"\n    height, width = image.shape[:2]\n    scaling_factor = target_height / height\n    new_width = int(width * scaling_factor)\n    new_size = (new_width, target_height)  # (width, height)\n    resized_image = cv2.resize(image, new_size, interpolation=cv2.INTER_AREA)\n    return resized_image, scaling_factor\ntrnv_image_loc = r'C:\\Users\\c883206\\OneDrive - BNSF Railway\\RoboRailCop\\2025-01-16_all_trnv_images\\trnvopendoor'\nfor trnv_image in os.listdir(trnv_image_loc):",
        "detail": "heuristic_cropping",
        "documentation": {}
    },
    {
        "label": "trnv_image_loc",
        "kind": 5,
        "importPath": "heuristic_cropping",
        "description": "heuristic_cropping",
        "peekOfCode": "trnv_image_loc = r'C:\\Users\\c883206\\OneDrive - BNSF Railway\\RoboRailCop\\2025-01-16_all_trnv_images\\trnvopendoor'\nfor trnv_image in os.listdir(trnv_image_loc):\n    if trnv_image.endswith('.jpg'):\n        # Load the image in grayscale\n        image = cv2.imread(os.path.join(trnv_image_loc, trnv_image), cv2.IMREAD_GRAYSCALE)\n        # Step 1: Resize the image to a consistent height\n        resized_image, scaling_factor = resize_to_height(image)\n        # Step 2: Apply histogram equalization to enhance contrast\n        equalized_image = cv2.equalizeHist(image)\n        # Step 3: Detect vertical edges using the Sobel filter",
        "detail": "heuristic_cropping",
        "documentation": {}
    }
]